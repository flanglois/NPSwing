#    "$Name:  $";
#    "$Header:  $";
#=============================================================================
#
# file :        DeltaTauToNexus.py
#
# description : Python source for the DeltaTauToNexus and its commands. 
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                DeltaTauToNexus are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#


import PyTango
import sys
import h5py
import csv
import os
import time


#==================================================================
#   DeltaTauToNexus Class Description:
#
#         DeltaTauToNexus transform CSV data files from the DeltaTau controller to Nexus files ready to be merged by the DataMerger
#
#==================================================================
#     Device States Description:
#
#   DevState.RUNNING :  The Process is RUNNING
#   DevState.STANDBY :  The Process is STANDBY
#==================================================================

class DeltaTauToNexus(PyTango.Device_4Impl):

#--------- Add you global variables here --------------------------

#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self,cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        DeltaTauToNexus.init_device(self)

#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        self.info_stream("[Device delete_device method] for device %s" % self.get_name())
        self.file_creation.stop()


#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
        self.info_stream("In %s::init_device()" % self.get_name())
        self.set_state(PyTango.DevState.ON)
        self.get_device_properties(self.get_device_class())
        
        self.set_state(PyTango.DevState.STANDBY)
        self.set_status("Ready to Start processing")
        
        self.session_counter_attribute_proxy = PyTango.AttributeProxy(self.SessionCounterAttributeName)

#------------------------------------------------------------------
#    Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")

#==================================================================
#
#    DeltaTauToNexus read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self,data):
        self.debug_stream("In read_attr_hardware()")

#------------------------------------------------------------------
#    Read csvInputDirectory attribute
#------------------------------------------------------------------
    def read_csvInputDirectory(self, attr):
        self.debug_stream("In read_csvInputDirectory()")
        
        #    Add your own code here
        
        #attr_csvInputDirectory_read = "Hello Tango world"
        attr.set_value(self.attr_csvInputDirectory_read)


#------------------------------------------------------------------
#    Write csvInputDirectory attribute
#------------------------------------------------------------------
    def write_csvInputDirectory(self, attr):
        self.info_stream("In write_csvInputDirectory()")
        self.attr_csvInputDirectory_read = attr.get_write_value()


#---- csvInputDirectory attribute State Machine -----------------
    def is_csvInputDirectory_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read nxsOutputDirectory attribute
#------------------------------------------------------------------
    def read_nxsOutputDirectory(self, attr):
        self.debug_stream("In read_nxsOutputDirectory()")
        
        #    Add your own code here

        attr.set_value(self.attr_nxsOutputDirectory_read)


#------------------------------------------------------------------
#    Write nxsOutputDirectory attribute
#------------------------------------------------------------------
    def write_nxsOutputDirectory(self, attr):
        self.info_stream("In write_nxsOutputDirectory()")
        self.attr_nxsOutputDirectory_read = attr.get_write_value()
        

#---- nxsOutputDirectory attribute State Machine -----------------
    def is_nxsOutputDirectory_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read selectedColumns attribute
#------------------------------------------------------------------
    def read_selectedColumns(self, attr):
        self.debug_stream("In read_selectedColumns()")
        
        #    Add your own code here
        
        attr.set_value(self.attr_selectedColumns_read)


#------------------------------------------------------------------
#    Write selectedColumns attribute
#------------------------------------------------------------------
    def write_selectedColumns(self, attr):        
        self.info_stream("In write_selectedColumns()")
        self.attr_selectedColumns_read = attr.get_write_value()
        
        # selected columns default columns: 1,2,6,7
        self.selected_columns = "1,2,6,7" # mandatory to compute the "substractions" data
        # transform the string to a list
        self.selected_columns = list(self.attr_selectedColumns_read.split(",")) 
        # transform list of str to list of int
        self.selected_columns = list(map(int,self.selected_columns))

#---- selectedColumns attribute State Machine -----------------
    def is_selectedColumns_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True
        
    #------------------------------------------------------------------
    #    Read currentSessionCounter attribute
    #------------------------------------------------------------------
    def read_currentSessionCounter(self, attr):
        self.debug_stream("In read_currentSessionCounter()")
        
        #    Add your own code here
        self.attr_currentSessionCounter_read = self.get_recordingmanager_sessioncounter()
        attr.set_value(self.attr_currentSessionCounter_read)



#==================================================================
#
#    DeltaTauToNexus command methods
#
#==================================================================

    ################################################################################
    def get_recordingmanager_sessioncounter(self):
        
        session_counter = long(self.session_counter_attribute_proxy.read().value)
        return session_counter

    ################################################################################
    def get_csv_file(self,index):

        while 1:
            csv_filenames = os.listdir(self.attr_csvInputDirectory_read)
            for f in csv_filenames:
                if int(f[f.rfind('-')+1:f.rfind('.')]) == int(index):
                    print "found csv_file : ", f
                    return f

            # csv file is not yet arrived: wait 1 sec
            print "csv_file not yet arrived, waiting 1 sec..."
            time.sleep(1)

    ################################################################################
    def create_nxs_data_file(self,csv_file_name):

        #------------------------------------------------
        #1 open / read csv file
        
        # declare the arrays
        gate_index              = []
        calc_gated_sample_tx    = []
        calc_gated_sample_tz    = []
        calc_gated_sample_rz    = []
        calc_gated_sample_rx    = []
        calc_gated_sample_rs    = []

        calc_gated_fzp_cs_tx    = []
        calc_gated_fzp_cs_tz    = []
        calc_gated_fzp_cs_rx    = []
        calc_gated_fzp_cs_rz    = []
        
        raw_gated_sample_txe    = []
        raw_gated_sample_txi    = []
        raw_gated_sample_tze    = []
        raw_gated_sample_tzi    = []
        raw_gated_sample_tzo    = []

        raw_gated_fzp_cs_txe    = []
        raw_gated_fzp_cs_txi    = []
        raw_gated_fzp_cs_tze    = []
        raw_gated_fzp_cs_tzi    = []

        std_gated_sample_txe    = []
        std_gated_sample_txi    = []
        std_gated_sample_tze    = []
        std_gated_sample_tzi    = []
        std_gated_sample_tzo    = []

        std_gated_fzp_cs_txe    = []
        std_gated_fzp_cs_txi    = []
        std_gated_fzp_cs_tze    = []
        std_gated_fzp_cs_tzi    = []

        substraction_calc_gated_tx = []
        substraction_calc_gated_tz = []

        # Open and Parse the CSV file
        with open(self.attr_csvInputDirectory_read + '/' + csv_file_name) as csv_file:
            csv_reader = csv.reader(csv_file, delimiter=';')
            line_count = 0
            for row in csv_reader:
                # 1st line are the names of the columns
                if line_count == 0:
                    print("Column names are: ", (row))
                    line_count += 1
                # then the real data
                else:
                    #try:
                    for column in range (len(self.selected_columns)):
                        if self.selected_columns[column] == 0:  
                            gate_index.append(float(row[0]))
                            
                        if self.selected_columns[column] == 1:                   
                            calc_gated_sample_tx.append(float(row[1]))
                        if self.selected_columns[column] == 2:               
                            calc_gated_sample_tz.append(float(row[2]))
                        if self.selected_columns[column] == 3:
                            calc_gated_sample_rz.append(float(row[3]))
                        if self.selected_columns[column] == 4:
                            calc_gated_sample_rx.append(float(row[4]))
                        if self.selected_columns[column] == 5:
                            calc_gated_sample_rs.append(float(row[5]))
                        
                        if self.selected_columns[column] == 6:
                            calc_gated_fzp_cs_tx.append(float(row[6]))
                        if self.selected_columns[column] == 7:
                            calc_gated_fzp_cs_tz.append(float(row[7]))
                        if self.selected_columns[column] == 8:
                            calc_gated_fzp_cs_rx.append(float(row[8]))
                        if self.selected_columns[column] == 9:
                            calc_gated_fzp_cs_rz.append(float(row[9]))

                        if self.selected_columns[column] == 10:
                            raw_gated_sample_txe.append(float(row[10]))
                        if self.selected_columns[column] == 11:
                            raw_gated_sample_txi.append(float(row[11]))
                        if self.selected_columns[column] == 12:
                            raw_gated_sample_tze.append(float(row[12]))
                        if self.selected_columns[column] == 13:
                            raw_gated_sample_tzi.append(float(row[13]))
                        if self.selected_columns[column] == 14:
                            raw_gated_sample_tzo.append(float(row[14]))

                        if self.selected_columns[column] == 15:
                            raw_gated_fzp_cs_txe.append(float(row[15]))
                        if self.selected_columns[column] == 16:
                            raw_gated_fzp_cs_txi.append(float(row[16]))
                        if self.selected_columns[column] == 17:
                            raw_gated_fzp_cs_tze.append(float(row[17]))
                        if self.selected_columns[column] == 18:
                            raw_gated_fzp_cs_tzi.append(float(row[18]))

                        if self.selected_columns[column] == 19:
                            std_gated_sample_txe.append(float(row[19]))
                        if self.selected_columns[column] == 20:
                            std_gated_sample_txi.append(float(row[20]))
                        if self.selected_columns[column] == 21:
                            std_gated_sample_tze.append(float(row[21]))
                        if self.selected_columns[column] == 22:
                            std_gated_sample_tzi.append(float(row[22]))
                        if self.selected_columns[column] == 23:
                            std_gated_sample_tzo.append(float(row[23]))

                        if self.selected_columns[column] == 24:
                            std_gated_fzp_cs_txe.append(float(row[24]))
                        if self.selected_columns[column] == 25:
                            std_gated_fzp_cs_txi.append(float(row[25]))
                        if self.selected_columns[column] == 26:
                            std_gated_fzp_cs_tze.append(float(row[26]))
                        if self.selected_columns[column] == 27:
                            std_gated_fzp_cs_tzi.append(float(row[27]))

                        # computed substractions for tx and tz
                        substraction_calc_gated_tx.append(float(row[1]) - float(row[6]))
                        substraction_calc_gated_tz.append(float(row[2]) - float(row[7]))

                    line_count += 1
                    #except :
                    #    pass
                        #print ("maybe end of the file...", )
            
            print "\ncalc_gated_sample_tx: ",calc_gated_sample_tx
            print('nb lines',line_count)

        #------------------------------------------------
        #2 create nxs file

        nxs_filename = "data_from_deltatau_000001.nxs"
        print "nxs_file = ", nxs_filename
        f = h5py.File(self.attr_nxsOutputDirectory_read +'/'+ nxs_filename, 'x') # 'x' means fail if file exist
        scan_data_entry = "/entry/scan_data"
        f.create_group(scan_data_entry)

        #------------------------------------------------
        #3 populate nxs file   

        for column in range (0, len(self.selected_columns)):
            if self.selected_columns[column] == 0:
                f[scan_data_entry].create_dataset(u"gate_index", data=gate_index)

            if self.selected_columns[column] == 1:
                f[scan_data_entry].create_dataset(u"calc_gated_sample_tx", data=calc_gated_sample_tx)
            if self.selected_columns[column] == 2:
                f[scan_data_entry].create_dataset(u"calc_gated_sample_tz", data=calc_gated_sample_tz)
            if self.selected_columns[column] == 3:
                f[scan_data_entry].create_dataset(u"calc_gated_sample_rz", data=calc_gated_sample_rz)
            if self.selected_columns[column] == 4:
                f[scan_data_entry].create_dataset(u"calc_gated_sample_rx", data=calc_gated_sample_rx)
            if self.selected_columns[column] == 5:
                f[scan_data_entry].create_dataset(u"calc_gated_sample_rs", data=calc_gated_sample_rs)

            if self.selected_columns[column] == 6:
                f[scan_data_entry].create_dataset(u"calc_gated_fzp_cs_tx", data=calc_gated_fzp_cs_tx)
            if self.selected_columns[column] == 7:
                f[scan_data_entry].create_dataset(u"calc_gated_fzp_cs_tz", data=calc_gated_fzp_cs_tz)
            if self.selected_columns[column] == 8:
                f[scan_data_entry].create_dataset(u"calc_gated_fzp_cs_rx", data=calc_gated_fzp_cs_rx)
            if self.selected_columns[column] == 9:
                f[scan_data_entry].create_dataset(u"calc_gated_fzp_cs_rz", data=calc_gated_fzp_cs_rz)

            if self.selected_columns[column] == 10:
                f[scan_data_entry].create_dataset(u"raw_gated_sample_txe", data=raw_gated_sample_txe)
            if self.selected_columns[column] == 11:
                f[scan_data_entry].create_dataset(u"raw_gated_sample_txi", data=raw_gated_sample_txi)
            if self.selected_columns[column] == 12:
                f[scan_data_entry].create_dataset(u"raw_gated_sample_tze", data=raw_gated_sample_tze)
            if self.selected_columns[column] == 13:
                f[scan_data_entry].create_dataset(u"raw_gated_sample_tzi", data=raw_gated_sample_tzi)
            if self.selected_columns[column] == 14:
                f[scan_data_entry].create_dataset(u"raw_gated_sample_tzo", data=raw_gated_sample_tzo)

            if self.selected_columns[column] == 15:
                f[scan_data_entry].create_dataset(u"raw_gated_fzp_cs_txe", data=raw_gated_fzp_cs_txe)
            if self.selected_columns[column] == 16:
                f[scan_data_entry].create_dataset(u"raw_gated_fzp_cs_txi", data=raw_gated_fzp_cs_txi)
            if self.selected_columns[column] == 17:
                f[scan_data_entry].create_dataset(u"raw_gated_fzp_cs_tze", data=raw_gated_fzp_cs_tze)
            if self.selected_columns[column] == 18:
                f[scan_data_entry].create_dataset(u"raw_gated_fzp_cs_tzi", data=raw_gated_fzp_cs_tzi)

            if self.selected_columns[column] == 19:
                f[scan_data_entry].create_dataset(u"std_gated_sample_txe", data=std_gated_sample_txe)
            if self.selected_columns[column] == 20:
                f[scan_data_entry].create_dataset(u"std_gated_sample_txi", data=std_gated_sample_txi)
            if self.selected_columns[column] == 21:
                f[scan_data_entry].create_dataset(u"std_gated_sample_tze", data=std_gated_sample_tze)
            if self.selected_columns[column] == 22:
                f[scan_data_entry].create_dataset(u"std_gated_sample_tzi", data=std_gated_sample_tzi)
            if self.selected_columns[column] == 23:
                f[scan_data_entry].create_dataset(u"std_gated_sample_tzo", data=std_gated_sample_tzo)

            if self.selected_columns[column] == 24:
                f[scan_data_entry].create_dataset(u"std_gated_fzp_cs_txe", data=std_gated_fzp_cs_txe)
            if self.selected_columns[column] == 25:
                f[scan_data_entry].create_dataset(u"std_gated_fzp_cs_txi", data=std_gated_fzp_cs_txi)
            if self.selected_columns[column] == 26:
                f[scan_data_entry].create_dataset(u"std_gated_fzp_cs_tze", data=std_gated_fzp_cs_tze)
            if self.selected_columns[column] == 27:
                f[scan_data_entry].create_dataset(u"std_gated_fzp_cs_tzi", data=std_gated_fzp_cs_tzi)


        # computed substractions for tx and tz
        f[scan_data_entry].create_dataset(u"historised_relative_sample_tx", data=substraction_calc_gated_tx)
        f[scan_data_entry].create_dataset(u"historised_relative_sample_tz", data=substraction_calc_gated_tz)

        fname = f.filename
        f.close()
        
        # for debug purpose: ie simulate the DataMerger Process
        #os.remove(fname) 
        self.info_stream("done")

    

#------------------------------------------------------------------
#    Start command:
#
#    Description: Start the Process
#                
#------------------------------------------------------------------
    def Start(self):
        self.info_stream("In Start()")
        self.set_state(PyTango.DevState.RUNNING)
        self.set_status("Process is running") 

        #1 get the session counter from RecordingManager, then check that the CSV as the good session counter 
        session_counter = self.get_recordingmanager_sessioncounter()
        self.info_stream("session_counter =  %s" % session_counter)

        #2 find the csv file with this index
        csv_file_name = self.get_csv_file(session_counter)

        #3 create the nxs file corresponding and copy csv data into it, the nxs file should be ending with 00001.nxs
        self.create_nxs_data_file(csv_file_name)
        
        self.set_state(PyTango.DevState.STANDBY)
        self.set_status("Ready to Start processing")
      

#---- Start command State Machine -----------------
    def is_Start_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#==================================================================
#
#    DeltaTauToNexusClass class definition
#
#==================================================================
class DeltaTauToNexusClass(PyTango.DeviceClass):

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'SessionCounterAttributeName':
            [PyTango.DevString,
            "Name of the session counter attribure",
            [ "flyscan/core/recording-manager.1/sessionCounter" ] ],
        }


    #    Command definitions
    cmd_list = {
        'Start':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        }


    #    Attribute definitions
    attr_list = {
        'csvInputDirectory':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true",
            } ],
        'nxsOutputDirectory':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true",
            } ],
        'selectedColumns':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true",
            } ],
        'currentSessionCounter':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ],
            {
               
            } ],   
        }


#------------------------------------------------------------------
#    DeltaTauToNexusClass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name);
        print "In DeltaTauToNexusClass  constructor"

#==================================================================
#
#    DeltaTauToNexus class main method
#
#==================================================================
if __name__ == '__main__':
    try:
        py = PyTango.Util(sys.argv)
        py.add_TgClass(DeltaTauToNexusClass,DeltaTauToNexus,'DeltaTauToNexus')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e
